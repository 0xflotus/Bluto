#!/usr/bin/python

import argparse
import traceback
import sys
import os
from termcolor import colored
from modules.resolve import main as resolve_dns
from modules import execute
from modules.logger_ import info
from modules import descriptor_
from modules.use_age import debug_out
from modules.b_classes.thread_class import MakeThread


def value_check(args):
	version = '3.0.0'
	args.VERSION_CONST = version
		
	if args.version:
		descriptor_.welcome(args)
		sys.exit()
	if args.linkA:
		count = args.linkA.count(args.delemiter)
		if count > 1:
			print('You seem to have multiple delemiter characters in the argument value.\nPlease double check your entry or specificy a custom delimitter.')
		elif count < 1:
			print('You seem to be missing the delemiter \'{}\' character in your password.\n'.format(args.delemiter))
			parser.print_help()
			sys.exit()
	else:
		args.linkP = True


parser = argparse.ArgumentParser(prog='Bluto', formatter_class=lambda prog: argparse.RawDescriptionHelpFormatter(prog,max_help_position=50), usage=descriptor_.des())

requiredNamed = parser.add_argument_group('Required Arguments')
requiredNamed.add_argument('-d', '--domain', help='Target Domain', required=True)

zn_group = parser.add_argument_group('DNS Arguments', 'DNS related checks ')
zn_group.add_argument('-b', '--brute', help='Enable SubDomain bruteforcing', required=False, action='store_true')
zn_group.add_argument('-z', '--zone', help='Enable ZoneTransfer Checks', required=False, action='store_true')

linked_group = parser.add_argument_group('LinkedIn', 'LinkedIn search method and arguments')
linked_group.add_argument('-la', '--linkA', help='Active login (most accurate results) example:\'username:password\'')
linked_group.add_argument('-lp', '--linkP', help='Passively gather data from search engines',action='store_true', default=False)
linked_group.add_argument('-del', '--delemiter', help='Custom delimter for LinkedInActive', default=':')

parser.add_argument('-i', '--intrusive', help='Authoritive DNS query.', required=False, action='store_true')
parser.add_argument('-e', '--email', help='Enable Email Enumeration', required=False, action='store_true')
parser.add_argument('-a', '--api', help='Hunter API key', required=False)
parser.add_argument('-t', '--timeo', help='Set timeout value | Default 5', required=False)
parser.add_argument('-ts', '--top', help='Most popular subdomains eg. Top1000', required=False)
parser.add_argument('-dns', '--dns', help='Carry out DNS enumeration', required=False, action='store_true')

parser.add_argument('--debug', help=argparse.SUPPRESS, required=False, action='store_true')
parser.add_argument('--VERSION_CONST', help=argparse.SUPPRESS, required=False)
parser.add_argument('--COMPANY_LOC', help=argparse.SUPPRESS, required=False)
parser.add_argument('-v', '--version', help='print version', required=False, action='store_true') 
args = parser.parse_args()


if __name__ == "__main__":
	info('bluto initialised')
	value_check(args)
	descriptor_.welcome(args)
	func_list = []
	if args.debug:
		info('debug enabled')
		print (colored('Debug Enabled:','red', 'on_yellow'))
		print (colored('Arg Output', 'red', 'on_yellow'))
		debug_out(args.__dict__)
	try:
		if args.dns is False and args.brute is False and args.zone is False:
			resolve_dns(args)
			execute._brute(args)

		else:
			if args.dns:
				info('dns enumeration started')
				resolve_dns(args)
			if args.brute is False and args.zone is True:
				info('zone transfer check started')
				execute.zone_trans(args)
			if args.brute:
				info('sub bruting started')
				execute._brute(args)
			if args.linkA:
				info('active linkedin search started')
				func_list.append(('linkedIn', args))
			if (args.api) or (args.email):
				info('email hunter started')
				'placeholder'

		if args.linkA:
			func_list.append(('linkedIn', args))

		if func_list:
			info('thread pool populating')
			jobs = MakeThread(func_list)
			threads = jobs.execute()
			for thread in threads:
				thread.start()

			for thread in threads:
				thread.join()
		print('\n')
	except Exception:
		print (traceback.print_exc())
	except KeyboardInterrupt:
		print ('\n\nRage Quit!!')

